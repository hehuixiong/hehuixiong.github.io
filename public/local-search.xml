<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Markdown 直接转换公众号文章，不再为排版花时间</title>
    <link href="/2020/11/30/Markdown%20%E7%9B%B4%E6%8E%A5%E8%BD%AC%E6%8D%A2%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%EF%BC%8C%E4%B8%8D%E5%86%8D%E4%B8%BA%E6%8E%92%E7%89%88%E8%8A%B1%E6%97%B6%E9%97%B4/"/>
    <url>/2020/11/30/Markdown%20%E7%9B%B4%E6%8E%A5%E8%BD%AC%E6%8D%A2%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%EF%BC%8C%E4%B8%8D%E5%86%8D%E4%B8%BA%E6%8E%92%E7%89%88%E8%8A%B1%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<p><a href="http://prod.zkqiang.cn/wxeditor">公众号 Markdown 编辑器</a><br><img src="http://static.zkqiang.cn/images/20190913221225.png-slim"></p><p>这是我基于一位大佬 @Lyric 开发的项目，进行 Fork 后的二次开发，因为原项目已经几个月没更新，有一些排版 BUG；而且我需要对样式进行个性化定制，有一些逻辑与原项目有冲突之处，所以没有选择 PR。</p><p>上面截图，也就是我目前发文的格式，这是我自己定制的主题样式。</p><h2 id="有多好用？有多好用？"><a href="#有多好用？有多好用？" class="headerlink" title="#有多好用？有多好用？"></a><a href="#%E6%9C%89%E5%A4%9A%E5%A5%BD%E7%94%A8%EF%BC%9F">#有多好用？</a>有多好用？</h2><p>先介绍下使用方式：在其他 Markdown 编辑器里写文章，全文粘贴到左栏，然后复制右栏，再粘贴到公众号后台，完了！</p><p>不需要再有多余的步骤，你复制过去的样式就是右栏看到的。</p><p><img src="http://static.zkqiang.cn/images/20190913213757.png-slim"></p><p>当然你也可以进行微调，比如添加字体的衬线、改字号，也有原作者提供的两种主题样式可选。</p><p>就是这款编辑器彻底<strong>解放</strong>了我。</p><p>毕竟我是公众号新人，对排版这种事情处于小白级别。我也知道传统情况下，文章写好只是发文的前半部分，还需要花大量时间去排版，给读者舒服的感觉，而该项目直接省掉了后半部分的时间，可以更专注于写作。</p><blockquote><p>另外，虽然是面向公众号，但经过测试，在其他不支持 Markdown 的平台上也同样可以使用。</p></blockquote><h2 id="更多细节更多细节"><a href="#更多细节更多细节" class="headerlink" title="#更多细节更多细节"></a><a href="#%E6%9B%B4%E5%A4%9A%E7%BB%86%E8%8A%82">#更多细节</a>更多细节</h2><h3 id="代码块代码块"><a href="#代码块代码块" class="headerlink" title="#代码块代码块"></a><a href="#%E4%BB%A3%E7%A0%81%E5%9D%97">#代码块</a>代码块</h3><p>通过定制支持了代码高亮的配色，我这里使用了大家熟悉的 Github 配色。</p><p><img src="http://static.zkqiang.cn/images/20190913214602.png-slim"></p><h3 id="注音符号注音符号"><a href="#注音符号注音符号" class="headerlink" title="#注音符号注音符号"></a><a href="#%E6%B3%A8%E9%9F%B3%E7%AC%A6%E5%8F%B7">#注音符号</a>注音符号</h3><p>这个是通过第三方库实现的，可以搞一些比如「丧心病狂{gàn・de・piào・liàng}」很有意思的效果。</p><p><img src="http://static.zkqiang.cn/images/20190913214803.png-slim"></p><h3 id="引用引用"><a href="#引用引用" class="headerlink" title="#引用引用"></a><a href="#%E5%BC%95%E7%94%A8">#引用</a>引用</h3><p>这也是个很有意思的功能点，公众号文章里放微信之外的链接，是无法点击跳转的，所以原作者把这种链接全部放在了文章末尾，就像学术文章的出处引用一样。</p><p><img src="http://static.zkqiang.cn/images/20190913215245.png-slim"></p><p>其他的细节可以看编辑器的默认文章。</p><h2 id="定制自己的样式定制自己的样式"><a href="#定制自己的样式定制自己的样式" class="headerlink" title="#定制自己的样式定制自己的样式"></a><a href="#%E5%AE%9A%E5%88%B6%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A0%B7%E5%BC%8F">#定制自己的样式</a>定制自己的样式</h2><p>如果你不想和我雷同，或者觉得我的样式不好看，那也可以自己再定制，只需要一点前端 CSS 基础即可。</p><p>这里不建议你 Fork 后开发自用，我希望大家可以把更多样式 PR 给我，放入项目中开源出去。</p><p>另外我还会对编辑器里面的逻辑进行优化，还有一些基础功能也暂时缺失，比如没有保存、没有修改高亮样式、没有在页面就能改各种样式的功能，这些都在我计划之内，如果你有更好的想法也欢迎发给我。</p><p><a href="http://prod.zkqiang.cn/wxeditor">&gt;&gt;&gt;&gt;&gt; 公众号编辑器地址 &lt;&lt;&lt;&lt;&lt;</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端技能训练: 重构一</title>
    <link href="/2020/11/30/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%83%BD%E8%AE%AD%E7%BB%83:%20%E9%87%8D%E6%9E%84%E4%B8%80/"/>
    <url>/2020/11/30/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%83%BD%E8%AE%AD%E7%BB%83:%20%E9%87%8D%E6%9E%84%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>或许你应该知道了，重构是怎样的，你也知道重构能带来什么。在我刚开始学重构和设计模式的时候，我需要去找一些好的示例，以便于我更好的学习。有时候不得不创造一些更好的场景，来实现这些功能。</p><p>有一天，我发现当我需要我一次又一次地重复讲述某些内容，于是我就计划着把这些应该掌握的技能放到Github上，也就有了[Artisan Stack] 计划。</p><p>每个程序员都不可避免地是一个Coder，一个没有掌握好技能的Coder，算不上是手工艺人，但是是手工人。</p><p>艺，需要有创造性的方法。</p><h1 id="前端技能训练-重构一"><a href="#前端技能训练-重构一" class="headerlink" title="前端技能训练: 重构一"></a><a href="">前端技能训练: 重构一</a></h1><h2 id="为什么重构"><a href="#为什么重构" class="headerlink" title="为什么重构?"></a>为什么重构?</h2><blockquote><p>为了更好的代码。</p></blockquote><p>在经历了一年多的工作之后，我平时的主要工作就是修Bug。刚开始的时候觉得无聊，后来才发现修Bug需要更好的技术。有时候你可能要面对着一坨一坨的代码，有时候你可能要花几天的时间去阅读代码。而，你重写那几十代码可能只会花上你不到一天的时间。但是如果你没办法理解当时为什么这么做，你的修改只会带来更多的bug。修Bug，更多的是维护代码。还是前人总结的那句话对:</p><blockquote><p>写代码容易，读代码难。</p></blockquote><p>假设我们写这些代码只要半天，而别人读起来要一天。为什么不试着用一天的时候去写这些代码，让别人花半天或者更少的时间来理解。</p><p>如果你的代码已经上线，虽然是一坨坨的。但是不要轻易尝试，<code>没有测试的重构</code>。</p><p>从前端开始的原因在于，写得一坨坨且最不容易测试的代码都在前端。</p><p>让我们来看看我们的第一个训练，相当有挑战性。</p><h2 id="重构uMarkdown"><a href="#重构uMarkdown" class="headerlink" title="重构uMarkdown"></a>重构uMarkdown</h2><p>代码及setup请见github: [js-refactor]</p><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><p><code>uMarkdown</code>是一个用于将Markdown转化为HTML的库。代码看上去就像一个很典型的过程代码:</p><pre><code>/* code */while ((stra = micromarkdown.regexobject.code.exec(str)) !== null) &#123;  str = str.replace(stra[0], &#39;&lt;code&gt;\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\n&#39;);&#125;/* headlines */while ((stra = micromarkdown.regexobject.headline.exec(str)) !== null) &#123;  count = stra[1].length;  str = str.replace(stra[0], &#39;&lt;h&#39; + count + &#39;&gt;&#39; + stra[2] + &#39;&lt;/h&#39; + count + &#39;&gt;&#39; + &#39;\n&#39;);&#125;/* mail */while ((stra = micromarkdown.regexobject.mail.exec(str)) !== null) &#123;  str = str.replace(stra[0], &#39;&lt;a href=&quot;mailto:&#39; + stra[1] + &#39;&quot;&gt;&#39; + stra[1] + &#39;&lt;/a&gt;&#39;);&#125;</code></pre><p>选这个做重构的开始，不仅仅是因为之前在写[EchoesWorks]的时候进行了很多的重构。而且它更适合于，<code>重构到设计模式</code>的理论。让我们在重构完之后，给作者进行pull request吧。</p><p>Markdown的解析过程，有点类似于<code>Pipe and Filters</code>模式(架构模式)。</p><p>Filter即我们在代码中看到的正规表达式集:</p><pre><code>regexobject: &#123;    headline: /^(\#&#123;1,6&#125;)([^\#\n]+)$/m,    code: /\s\`\`\`\n?([^`]+)\`\`\`/g</code></pre><p>他会匹配对应的Markdown类型，随后进行替换和处理。而``str```，就是管理口的输入和输出。</p><p>接着，我们就可以对其进行简单的重构。</p><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>(ps: 推荐用WebStrom来做重构，自带重构功能)</p><p>作为一个示例，我们先提出codeHandler方法，即将上面的</p><pre><code>/* code */while ((stra = micromarkdown.regexobject.code.exec(str)) !== null) &#123;  str = str.replace(stra[0], &#39;&lt;code&gt;\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\n&#39;);&#125;</code></pre><p>提取方法成</p><pre><code>codeFilter: function (str, stra) &#123;    return str.replace(stra[0], &#39;&lt;code&gt;\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\n&#39;);  &#125;,</code></pre><p>while语句就成了</p><pre><code>  while ((stra = regexobject.code.exec(str)) !== null) &#123;        str = this.codeFilter(str, stra);    &#125;</code></pre><p>然后，运行所有的测试。</p><pre><code>grunt test</code></pre><p>同理我们就可以<code>mail</code>、<code>headline</code>等方法进行重构。接着就会变成类似于下面的代码，</p><pre><code>  /* code */  while ((execStr = regExpObject.code.exec(str)) !== null) &#123;    str = codeHandler(str, execStr);  &#125;  /* headlines */  while ((execStr = regExpObject.headline.exec(str)) !== null) &#123;    str = headlineHandler(str, execStr);  &#125;  /* lists */  while ((execStr = regExpObject.lists.exec(str)) !== null) &#123;    str = listHandler(str, execStr);  &#125;  /* tables */  while ((execStr = regExpObject.tables.exec(str)) !== null) &#123;    str = tableHandler(str, execStr, strict);  &#125;</code></pre><p>然后你也看到了，上面有一堆重复的代码，接着让我们用JavaScript的<code>奇技浮巧</code>，即apply方法，把上面的重复代码变成。</p><pre><code>    [&#39;code&#39;, &#39;headline&#39;, &#39;lists&#39;, &#39;tables&#39;, &#39;links&#39;, &#39;mail&#39;, &#39;url&#39;, &#39;smlinks&#39;, &#39;hr&#39;].forEach(function (type) &#123;        while ((stra = regexobject[type].exec(str)) !== null) &#123;            str = that[(type + &#39;Handler&#39;)].apply(that, [stra, str, strict]);        &#125;    &#125;);</code></pre><p>进行测试，blabla，都是过的。</p><pre><code> Markdown   ✓ should parse h1~h3   ✓ should parse link   ✓ should special link   ✓ should parse font style   ✓ should parse code   ✓ should parse ul list   ✓ should parse ul table   ✓ should return correctly class name</code></pre><p>这样，我们就完成第一个重构训练了~~。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 解决 InsecurePlatformWarning: A true SSLContext object is not available.</title>
    <link href="/2020/11/30/Python%20%E8%A7%A3%E5%86%B3%20InsecurePlatformWarning/"/>
    <url>/2020/11/30/Python%20%E8%A7%A3%E5%86%B3%20InsecurePlatformWarning/</url>
    
    <content type="html"><![CDATA[<h3 id="在安装Python库的时候，遇到一些问题。虽然，还是遇到问题了"><a href="#在安装Python库的时候，遇到一些问题。虽然，还是遇到问题了" class="headerlink" title="在安装Python库的时候，遇到一些问题。虽然，还是遇到问题了:"></a>在安装Python库的时候，遇到一些问题。虽然，还是遇到问题了:</h3><pre><code class="hljs code">Collecting PyMySQL&#x2F;Users&#x2F;fdhuang&#x2F;py27&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;requests&#x2F;packages&#x2F;urllib3&#x2F;util&#x2F;ssl_.py:79: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. For more information, see https:&#x2F;&#x2F;urllib3.readthedocs.org&#x2F;en&#x2F;latest&#x2F;security.html#insecureplatformwarning.  InsecurePlatformWarning  Downloading PyMySQL-0.6.6-py2.py3-none-any.whl (66kB)    100% |████████████████████████████████| 69kB 225kB&#x2F;sInstalling collected packages: PyMySQLSuccessfully installed PyMySQL-0.6.6</code></pre><h3 id="因为SSL的问题，urllib3需要pyopenssl。"><a href="#因为SSL的问题，urllib3需要pyopenssl。" class="headerlink" title="因为SSL的问题，urllib3需要pyopenssl。"></a>因为SSL的问题，urllib3需要pyopenssl。</h3><p>最简单的方法是</p><pre><code class="hljs bash">$ pip install pyopenssl ndg-httpsclient pyasn1</code></pre><p>还需要安装libffi-dev，libssl-dev</p><h3 id="Ubuntu下安装"><a href="#Ubuntu下安装" class="headerlink" title="Ubuntu下安装"></a>Ubuntu下安装</h3><pre><code class="hljs bash">$ sudo apt-get install libffi-dev libssl-dev</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
