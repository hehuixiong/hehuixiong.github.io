<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>谈谈敏捷开发</title>
      <link href="2020/12/03/%E8%B0%88%E8%B0%88%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
      <url>2020/12/03/%E8%B0%88%E8%B0%88%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="#%E8%B0%88%E8%B0%88%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91">谈谈敏捷开发</a></li><li><a href="#%E5%B0%8F%E6%AD%A5%E5%BF%AB%E8%B7%91%E3%80%81%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91">小步快跑、敏捷开发</a></li><li><a href="#%E7%9C%9F%E5%AE%9E%E7%9A%84%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91">真实的敏捷开发</a></li><li><a href="#%E5%90%8E%E6%B3%A8">后注</a></li></ol><h1 id="谈谈敏捷开发"><a href="#谈谈敏捷开发" class="headerlink" title="#谈谈敏捷开发"></a><a href="#%E8%B0%88%E8%B0%88%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91">#谈谈敏捷开发</a></h1><p>好久没有更新一下博客，最近有在尝试新的领域，可是一直没能积累下什么重要的知识、或者形成了什么重要的知识体系，就没能写下什么有意义的记录。可是很偶然的机会看到一个视频，里面讲述的，乔布斯谈论关于【流程与人才】的理解，基本可以总结为：苹果没有像 IBM 一样衰落，很大一部分原因是苹果没有执行像 IBM 一样严格的流程管理，使得有能力、有才华的人才能够不受大公司中条条框框的约束，充分发挥自己优势，最终促使苹果一次又一次的震惊世界。</p><p>看到这个视频的时候，脑子中转过了好多好多的话语，没能按耐住自己的情绪，终究还是在 Twitter 中直接开喷。当然，喷的并不是乔布斯或者是他的言论，<strong>乔帮主</strong>在国内一波又一波媒体、开发者的吹捧下，早就已经走上了“冰封王座”。他的一生、创办苹果的风风雨雨，相信拜读过《乔布斯传》的人都能已经耳熟能详了，这里不再细说。总而言之，对于笔者自身，远远还达不到批判他的言辞的资格。</p><blockquote><p>废话说了那么多，结果原来只是像表达自己的弱小</p></blockquote><p>乔布斯确实过于优秀了，以至于越来越多的年轻人、创业者，都想要向他学习，见贤思齐焉。而学习最简单不过的方式，就是模仿。现在越来越容易听到那些晦涩难懂，可是由显得高端深奥的词汇。似乎在这种谈吐中更容易体现出自身对于产品思考的深入。</p><p>“把握用户体验”，“重新定义 XX”，甚至 “打破流程”。“ IBM 之所以没落，就是因为他大公司中繁重的流程，约束的条条框框。” 所以我们要注重人才的才华展示，淡化流程。乔布斯所表达的观点，我们全盘接受。</p><p>这样子的学习，简单至极。</p><p><strong>流程不再重要了。</strong>—— 这就是为什么现在产品经理跟开发工程师之间存在如此对立的原因。</p><p>当然，其实乔布斯并非推动国内各大企业打破传统、废除流程的唯一功臣，另外一个更广为人知的，当然是数早已被广为人知的、被誉为中国第一产品经理的 —— 张小龙。如果你不知道这个人的话，你可以点击 (Ctrl+W) 组合键，快速查询这个人的相关信息。^_^ 得益于他的知名度以及微信的成功，“打破流程”、“简化流程”、“把握用户体验” 获得了一个更加接地气的名称 —— “<strong>小步快跑，敏捷开发</strong>”。</p><p>对比于传统应用开发方式，敏捷开发在当前互联网形式上确为更加合适，毫不夸张的说，如果目前的产品开发还按照从前的开发形式，普通创业公司绝大部分会在产品推出之前，就将所有的开发经费耗光。这个时候没有任何知名度、也没有成型的产品，根本无从谈起融资以及上市。</p><h2 id="小步快跑、敏捷开发"><a href="#小步快跑、敏捷开发" class="headerlink" title="#小步快跑、敏捷开发"></a><a href="#%E5%B0%8F%E6%AD%A5%E5%BF%AB%E8%B7%91%E3%80%81%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91">#小步快跑、敏捷开发</a></h2><p>仔细考虑，其实这种开发方式在起步阶段是比较合理的。一周一个小版本，一个月一个大版本，对每次开发的新功能做好足够的调研以及打点统计，能够在不进行市场调查的前提上获取用户对于功能的喜好程度，从而在后续的开发中对特定的功能进行资源的倾斜，更大程度上去<strong>取悦用户</strong>。<br>不得不说，微信在初期发展中，摸索到了<strong>摇一摇</strong>以及<strong>朋友圈</strong>这两大功能，然后持续在上面增加功能，优化体验，让用户真正的粘附在了微信生态上，也算是对小步快跑、敏捷开发的很好体现。微信的成功，也让更多的公司相信这种开发模式的正确性。</p><p>我们来仔细捋一下这种开发模式的要点：</p><ol><li>小版本周期短</li><li>小版本所携带新功能有针对性</li><li>开发过程中对新功能做好打点统计</li><li>产品上线后进行需求复盘，通过统计上报，得知用户对于新功能的喜好程度</li><li>对下一新版本的开发计划进行评估</li></ol><p>其中，复盘步骤对于敏捷开发的模式尤为重要。并且不仅是产品经理，包括开发人员都需要参与到复盘的步骤中。对于一个开发人员，得知自己所开发功能受到用户的喜爱，自身对于下个版本的开发积极性也会有相应的提高。</p><h2 id="真实的敏捷开发"><a href="#真实的敏捷开发" class="headerlink" title="#真实的敏捷开发"></a><a href="#%E7%9C%9F%E5%AE%9E%E7%9A%84%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91">#真实的敏捷开发</a></h2><p>可是，有多少公司又能很好地在版本迭代的过程中持续遵循上述的要点呢？不少的公司更多的只是喊着敏捷开发的口号，在更短的时间内，往产品中堆砌着更多的功能，从而导致开发人员在长时间内一直保持着难以接受的开发强度，最终导致人员的流失，项目的失败。</p><p>笔者从自身的工作环境中，感受到两点：</p><ul><li>老板过多地参与进项目开发的细节中</li><li>复盘步骤的缺失，或者复盘步骤对于产品经理们的负反馈缺失</li></ul><p>笔者对于第一点真是深有体会。其实老板们关注细节无可厚非，可是过多的参与到项目开发中，很容易导致到开发节奏混乱，无法保持小版本迭代的步骤中。因为版本开发迭代期间，并不会频繁地推送到老板处体验，只能在项目上线阶段提交给老板进行上线前的最后体验。正常情况下，老板应该对这个功能开发进行最后的确认，确认这个版本是否与开发初期所定下的发展方向一致，而不应该对细节进行过多的反馈，一来这个环节在开发过程中早就经过产品经理的把控；二来开发人员、乃至于产品经理，都很难对老板所提出的细节要求说不，容易导致项目进度一拖再拖。三来甚至会过度打击产品经理的积极性，最终导致产品经理不再创新，只会揣测老板的心思。</p><p>即便是成功至此的微信，笔者感觉它都已经不再是认真遵循着敏捷开发的模式了，大家可以从微信的招聘口号中可以感受一下：</p><blockquote><p>做一个伟大的产品来取悦<strong>自己</strong>。</p></blockquote><h2 id="后注"><a href="#后注" class="headerlink" title="#后注"></a><a href="#%E5%90%8E%E6%B3%A8">#后注</a></h2><p>毕竟这片文章只是有感而发，想到哪写到哪，尚未经过深入思考。请读者们轻喷。</p>]]></content>
      
      
      <categories>
          
          <category> 开发技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端技能训练: 重构一</title>
      <link href="2020/12/03/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%83%BD%E8%AE%AD%E7%BB%83:%20%E9%87%8D%E6%9E%84%E4%B8%80/"/>
      <url>2020/12/03/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%83%BD%E8%AE%AD%E7%BB%83:%20%E9%87%8D%E6%9E%84%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>或许你应该知道了，重构是怎样的，你也知道重构能带来什么。在我刚开始学重构和设计模式的时候，我需要去找一些好的示例，以便于我更好的学习。有时候不得不创造一些更好的场景，来实现这些功能。</p><p>有一天，我发现当我需要我一次又一次地重复讲述某些内容，于是我就计划着把这些应该掌握的技能放到Github上，也就有了[Artisan Stack] 计划。</p><p>每个程序员都不可避免地是一个Coder，一个没有掌握好技能的Coder，算不上是手工艺人，但是是手工人。</p><p>艺，需要有创造性的方法。</p><h1 id="前端技能训练-重构一"><a href="#前端技能训练-重构一" class="headerlink" title="前端技能训练: 重构一"></a><a href="">前端技能训练: 重构一</a></h1><h2 id="为什么重构"><a href="#为什么重构" class="headerlink" title="为什么重构?"></a>为什么重构?</h2><blockquote><p>为了更好的代码。</p></blockquote><p>在经历了一年多的工作之后，我平时的主要工作就是修Bug。刚开始的时候觉得无聊，后来才发现修Bug需要更好的技术。有时候你可能要面对着一坨一坨的代码，有时候你可能要花几天的时间去阅读代码。而，你重写那几十代码可能只会花上你不到一天的时间。但是如果你没办法理解当时为什么这么做，你的修改只会带来更多的bug。修Bug，更多的是维护代码。还是前人总结的那句话对:</p><blockquote><p>写代码容易，读代码难。</p></blockquote><p>假设我们写这些代码只要半天，而别人读起来要一天。为什么不试着用一天的时候去写这些代码，让别人花半天或者更少的时间来理解。</p><p>如果你的代码已经上线，虽然是一坨坨的。但是不要轻易尝试，<code>没有测试的重构</code>。</p><p>从前端开始的原因在于，写得一坨坨且最不容易测试的代码都在前端。</p><p>让我们来看看我们的第一个训练，相当有挑战性。</p><h2 id="重构uMarkdown"><a href="#重构uMarkdown" class="headerlink" title="重构uMarkdown"></a>重构uMarkdown</h2><p>代码及setup请见github: [js-refactor]</p><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><p><code>uMarkdown</code>是一个用于将Markdown转化为HTML的库。代码看上去就像一个很典型的过程代码:</p><pre><code>/* code */while ((stra = micromarkdown.regexobject.code.exec(str)) !== null) &#123;  str = str.replace(stra[0], &#39;&lt;code&gt;\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\n&#39;);&#125;/* headlines */while ((stra = micromarkdown.regexobject.headline.exec(str)) !== null) &#123;  count = stra[1].length;  str = str.replace(stra[0], &#39;&lt;h&#39; + count + &#39;&gt;&#39; + stra[2] + &#39;&lt;/h&#39; + count + &#39;&gt;&#39; + &#39;\n&#39;);&#125;/* mail */while ((stra = micromarkdown.regexobject.mail.exec(str)) !== null) &#123;  str = str.replace(stra[0], &#39;&lt;a href=&quot;mailto:&#39; + stra[1] + &#39;&quot;&gt;&#39; + stra[1] + &#39;&lt;/a&gt;&#39;);&#125;</code></pre><p>选这个做重构的开始，不仅仅是因为之前在写[EchoesWorks]的时候进行了很多的重构。而且它更适合于，<code>重构到设计模式</code>的理论。让我们在重构完之后，给作者进行pull request吧。</p><p>Markdown的解析过程，有点类似于<code>Pipe and Filters</code>模式(架构模式)。</p><p>Filter即我们在代码中看到的正规表达式集:</p><pre><code>regexobject: &#123;    headline: /^(\#&#123;1,6&#125;)([^\#\n]+)$/m,    code: /\s\`\`\`\n?([^`]+)\`\`\`/g</code></pre><p>他会匹配对应的Markdown类型，随后进行替换和处理。而``str```，就是管理口的输入和输出。</p><p>接着，我们就可以对其进行简单的重构。</p><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>(ps: 推荐用WebStrom来做重构，自带重构功能)</p><p>作为一个示例，我们先提出codeHandler方法，即将上面的</p><pre><code>/* code */while ((stra = micromarkdown.regexobject.code.exec(str)) !== null) &#123;  str = str.replace(stra[0], &#39;&lt;code&gt;\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\n&#39;);&#125;</code></pre><p>提取方法成</p><pre><code>codeFilter: function (str, stra) &#123;    return str.replace(stra[0], &#39;&lt;code&gt;\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\n&#39;);  &#125;,</code></pre><p>while语句就成了</p><pre><code>  while ((stra = regexobject.code.exec(str)) !== null) &#123;        str = this.codeFilter(str, stra);    &#125;</code></pre><p>然后，运行所有的测试。</p><pre><code>grunt test</code></pre><p>同理我们就可以<code>mail</code>、<code>headline</code>等方法进行重构。接着就会变成类似于下面的代码，</p><pre><code>  /* code */  while ((execStr = regExpObject.code.exec(str)) !== null) &#123;    str = codeHandler(str, execStr);  &#125;  /* headlines */  while ((execStr = regExpObject.headline.exec(str)) !== null) &#123;    str = headlineHandler(str, execStr);  &#125;  /* lists */  while ((execStr = regExpObject.lists.exec(str)) !== null) &#123;    str = listHandler(str, execStr);  &#125;  /* tables */  while ((execStr = regExpObject.tables.exec(str)) !== null) &#123;    str = tableHandler(str, execStr, strict);  &#125;</code></pre><p>然后你也看到了，上面有一堆重复的代码，接着让我们用JavaScript的<code>奇技浮巧</code>，即apply方法，把上面的重复代码变成。</p><pre><code>    [&#39;code&#39;, &#39;headline&#39;, &#39;lists&#39;, &#39;tables&#39;, &#39;links&#39;, &#39;mail&#39;, &#39;url&#39;, &#39;smlinks&#39;, &#39;hr&#39;].forEach(function (type) &#123;        while ((stra = regexobject[type].exec(str)) !== null) &#123;            str = that[(type + &#39;Handler&#39;)].apply(that, [stra, str, strict]);        &#125;    &#125;);</code></pre><p>进行测试，blabla，都是过的。</p><pre><code> Markdown   ✓ should parse h1~h3   ✓ should parse link   ✓ should special link   ✓ should parse font style   ✓ should parse code   ✓ should parse ul list   ✓ should parse ul table   ✓ should return correctly class name</code></pre><p>这样，我们就完成第一个重构训练了~~。</p>]]></content>
      
      
      <categories>
          
          <category> 前端优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> javaScript </tag>
            
            <tag> html </tag>
            
            <tag> vue.js </tag>
            
            <tag> elementui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 解决 InsecurePlatformWarning: A true SSLContext object is not available.</title>
      <link href="2020/12/03/Python%20%E8%A7%A3%E5%86%B3%20InsecurePlatformWarning/"/>
      <url>2020/12/03/Python%20%E8%A7%A3%E5%86%B3%20InsecurePlatformWarning/</url>
      
        <content type="html"><![CDATA[<h3 id="在安装Python库的时候，遇到一些问题。虽然，还是遇到问题了"><a href="#在安装Python库的时候，遇到一些问题。虽然，还是遇到问题了" class="headerlink" title="在安装Python库的时候，遇到一些问题。虽然，还是遇到问题了:"></a>在安装Python库的时候，遇到一些问题。虽然，还是遇到问题了:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Collecting PyMySQL</span><br><span class="line">&#x2F;Users&#x2F;fdhuang&#x2F;py27&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;requests&#x2F;packages&#x2F;urllib3&#x2F;util&#x2F;ssl_.py:79: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. For more information, see https:&#x2F;&#x2F;urllib3.readthedocs.org&#x2F;en&#x2F;latest&#x2F;security.html#insecureplatformwarning.</span><br><span class="line">  InsecurePlatformWarning</span><br><span class="line">  Downloading PyMySQL-0.6.6-py2.py3-none-any.whl (66kB)</span><br><span class="line">    100% |████████████████████████████████| 69kB 225kB&#x2F;s</span><br><span class="line">Installing collected packages: PyMySQL</span><br><span class="line">Successfully installed PyMySQL-0.6.6</span><br></pre></td></tr></table></figure><h3 id="因为SSL的问题，urllib3需要pyopenssl。"><a href="#因为SSL的问题，urllib3需要pyopenssl。" class="headerlink" title="因为SSL的问题，urllib3需要pyopenssl。"></a>因为SSL的问题，urllib3需要pyopenssl。</h3><p>最简单的方法是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pyopenssl ndg-httpsclient pyasn1</span><br></pre></td></tr></table></figure><p>还需要安装libffi-dev，libssl-dev</p><h3 id="Ubuntu下安装"><a href="#Ubuntu下安装" class="headerlink" title="Ubuntu下安装"></a>Ubuntu下安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libffi-dev libssl-dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
