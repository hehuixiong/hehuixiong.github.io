<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端技能训练: 重构一</title>
      <link href="2020/12/17/refactor1/"/>
      <url>2020/12/17/refactor1/</url>
      
        <content type="html"><![CDATA[<p>或许你应该知道了，重构是怎样的，你也知道重构能带来什么。在我刚开始学重构和设计模式的时候，我需要去找一些好的示例，以便于我更好的学习。有时候不得不创造一些更好的场景，来实现这些功能。</p><p>有一天，我发现当我需要我一次又一次地重复讲述某些内容，于是我就计划着把这些应该掌握的技能放到Github上，也就有了[Artisan Stack] 计划。</p><p>每个程序员都不可避免地是一个Coder，一个没有掌握好技能的Coder，算不上是手工艺人，但是是手工人。</p><p>艺，需要有创造性的方法。</p><h1 id="前端技能训练-重构一"><a href="#前端技能训练-重构一" class="headerlink" title="前端技能训练: 重构一"></a><a href>前端技能训练: 重构一</a></h1><h2 id="为什么重构"><a href="#为什么重构" class="headerlink" title="为什么重构?"></a>为什么重构?</h2><blockquote><p>为了更好的代码。</p></blockquote><p>在经历了一年多的工作之后，我平时的主要工作就是修Bug。刚开始的时候觉得无聊，后来才发现修Bug需要更好的技术。有时候你可能要面对着一坨一坨的代码，有时候你可能要花几天的时间去阅读代码。而，你重写那几十代码可能只会花上你不到一天的时间。但是如果你没办法理解当时为什么这么做，你的修改只会带来更多的bug。修Bug，更多的是维护代码。还是前人总结的那句话对:</p><blockquote><p>写代码容易，读代码难。</p></blockquote><p>假设我们写这些代码只要半天，而别人读起来要一天。为什么不试着用一天的时候去写这些代码，让别人花半天或者更少的时间来理解。</p><p>如果你的代码已经上线，虽然是一坨坨的。但是不要轻易尝试，<code>没有测试的重构</code>。</p><p>从前端开始的原因在于，写得一坨坨且最不容易测试的代码都在前端。</p><p>让我们来看看我们的第一个训练，相当有挑战性。</p><h2 id="重构uMarkdown"><a href="#重构uMarkdown" class="headerlink" title="重构uMarkdown"></a>重构uMarkdown</h2><p>代码及setup请见github: [js-refactor]</p><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><p><code>uMarkdown</code>是一个用于将Markdown转化为HTML的库。代码看上去就像一个很典型的过程代码:</p><pre><code>/* code */while ((stra = micromarkdown.regexobject.code.exec(str)) !== null) &#123;  str = str.replace(stra[0], &#39;&lt;code&gt;\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\n&#39;);&#125;/* headlines */while ((stra = micromarkdown.regexobject.headline.exec(str)) !== null) &#123;  count = stra[1].length;  str = str.replace(stra[0], &#39;&lt;h&#39; + count + &#39;&gt;&#39; + stra[2] + &#39;&lt;/h&#39; + count + &#39;&gt;&#39; + &#39;\n&#39;);&#125;/* mail */while ((stra = micromarkdown.regexobject.mail.exec(str)) !== null) &#123;  str = str.replace(stra[0], &#39;&lt;a href=&quot;mailto:&#39; + stra[1] + &#39;&quot;&gt;&#39; + stra[1] + &#39;&lt;/a&gt;&#39;);&#125;</code></pre><p>选这个做重构的开始，不仅仅是因为之前在写[EchoesWorks]的时候进行了很多的重构。而且它更适合于，<code>重构到设计模式</code>的理论。让我们在重构完之后，给作者进行pull request吧。</p><p>Markdown的解析过程，有点类似于<code>Pipe and Filters</code>模式(架构模式)。</p><p>Filter即我们在代码中看到的正规表达式集:</p><pre><code>regexobject: &#123;    headline: /^(\#&#123;1,6&#125;)([^\#\n]+)$/m,    code: /\s\`\`\`\n?([^`]+)\`\`\`/g</code></pre><p>他会匹配对应的Markdown类型，随后进行替换和处理。而``str```，就是管理口的输入和输出。</p><p>接着，我们就可以对其进行简单的重构。</p><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>(ps: 推荐用WebStrom来做重构，自带重构功能)</p><p>作为一个示例，我们先提出codeHandler方法，即将上面的</p><pre><code>/* code */while ((stra = micromarkdown.regexobject.code.exec(str)) !== null) &#123;  str = str.replace(stra[0], &#39;&lt;code&gt;\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\n&#39;);&#125;</code></pre><p>提取方法成</p><pre><code>codeFilter: function (str, stra) &#123;    return str.replace(stra[0], &#39;&lt;code&gt;\n&#39; + micromarkdown.htmlEncode(stra[1]).replace(/\n/gm, &#39;&lt;br/&gt;&#39;).replace(/\ /gm, &#39;&amp;nbsp;&#39;) + &#39;&lt;/code&gt;\n&#39;);  &#125;,</code></pre><p>while语句就成了</p><pre><code>  while ((stra = regexobject.code.exec(str)) !== null) &#123;        str = this.codeFilter(str, stra);    &#125;</code></pre><p>然后，运行所有的测试。</p><pre><code>grunt test</code></pre><p>同理我们就可以<code>mail</code>、<code>headline</code>等方法进行重构。接着就会变成类似于下面的代码，</p><pre><code>  /* code */  while ((execStr = regExpObject.code.exec(str)) !== null) &#123;    str = codeHandler(str, execStr);  &#125;  /* headlines */  while ((execStr = regExpObject.headline.exec(str)) !== null) &#123;    str = headlineHandler(str, execStr);  &#125;  /* lists */  while ((execStr = regExpObject.lists.exec(str)) !== null) &#123;    str = listHandler(str, execStr);  &#125;  /* tables */  while ((execStr = regExpObject.tables.exec(str)) !== null) &#123;    str = tableHandler(str, execStr, strict);  &#125;</code></pre><p>然后你也看到了，上面有一堆重复的代码，接着让我们用JavaScript的<code>奇技浮巧</code>，即apply方法，把上面的重复代码变成。</p><pre><code>    [&#39;code&#39;, &#39;headline&#39;, &#39;lists&#39;, &#39;tables&#39;, &#39;links&#39;, &#39;mail&#39;, &#39;url&#39;, &#39;smlinks&#39;, &#39;hr&#39;].forEach(function (type) &#123;        while ((stra = regexobject[type].exec(str)) !== null) &#123;            str = that[(type + &#39;Handler&#39;)].apply(that, [stra, str, strict]);        &#125;    &#125;);</code></pre><p>进行测试，blabla，都是过的。</p><pre><code> Markdown   ✓ should parse h1~h3   ✓ should parse link   ✓ should special link   ✓ should parse font style   ✓ should parse code   ✓ should parse ul list   ✓ should parse ul table   ✓ should return correctly class name</code></pre><p>这样，我们就完成第一个重构训练了~~。</p>]]></content>
      
      
      <categories>
          
          <category> 前端优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> javaScript </tag>
            
            <tag> html </tag>
            
            <tag> vue.js </tag>
            
            <tag> elementui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Actions为什么这么香</title>
      <link href="2020/12/17/github/"/>
      <url>2020/12/17/github/</url>
      
        <content type="html"><![CDATA[<h2 id="本文存在大量纰漏待修正"><a href="#本文存在大量纰漏待修正" class="headerlink" title="本文存在大量纰漏待修正"></a>本文存在大量纰漏待修正</h2><p><code>Github Actions</code>为什么这么香,我为什么专门建了一个组织<code>ccknbc-actions</code>来跑actions并储存博客源码，或者其他只是单纯来跑actions的项目，一开始就单纯只是想分类，forked一堆，主账号自己的项目却混在其中，最新的反而是天天运行actions的（排在前面）</p><p>而对大多数博主来说，都是把自己的源码（包含源文章）仓库私有起来，而一个普通账号每个月私有仓库运行时间为2000分钟，确实，是完全够用的，对于我们这种月更博主来说一个月100分钟而已（<del>好吧我就是懒</del>）；不过作为白嫖党我还是公开了仓库（这样就不限制运行时间了），但如果你选择了定时执行某些项目，注意间隔最小为<code>5分钟</code>，而触发方式也是多种多样的，但最让人欣喜的是手动触发方式终于完成了技术革命，不再监控star动作了，而是只有项目所有者可执行，这样就不会再运行记录里出现一堆无关记录影响查看（虽然之前判断仓库所有者也是OK，但是强迫症不接受两秒运行跳过无关记录）</p><p>而且由于分配的临时机性能还不错，速度还是很可观的，并且不受长城防火墙的限制，可以很方便的做一些其他事情，这里就不细说，回到标题，它为什么这么香呢？</p><p>可能在工作流文件书写上没其他第三方简单，用过<code>Travis CI</code>或者<code>Gitlab CI</code>的都应该有体会，但自家的经过这么久的发展，用起来还是比较舒服的，而且用户编写的actions可以直接拿来用发布到市场，这样有些功能的实现就不用再自己想半天去实现，几行代码就搞定，用HEXO写博客的都知道Gitee托管静态网页要更新的话就得手动点一下更新才行，而actions就可以帮我们去点一下以实现同步全自动更新，多平台部署</p><p>Github本身自带的模板是OK的，但毕竟很多新手完全不懂，但其实上手一段时间就明白了每一步在做什么为什么要这样写，官方文档的例子虽然很简单但确实是包含了常用的一些步骤，再加上很多人分享，直接拿来用就行，毕竟搜索引擎不能摆在那不用，爬几篇文章学习一下就会了，这里我以部署HEXO博客为例来说一下</p><p>首先我们得明白，要让Github能在你git push上去后能自动部署博客，你得知道博客的源文件是必须要的，但备份哪些呢，下图只是以本站做一个示例，框中的是必须要有的（如果你不打算修改主题源码其实也不用备份，但毕竟可以节约时间，第一次备份前记得在主题文件夹删掉<code>.git</code>隐藏文件夹，不然推上去是空的会导致运行失败），其他根据个人需求，，配一个证书或者README等，但你还在疑惑；我没有.github文件夹啊，没错这个就是我们自己新建的文件夹，在博客根目录依次建立<code>.github/workflows/*.yml</code>文件</p><p><img src= "https://cdn.jsdelivr.net/gh/ccknbc-backup/photos/blog/2020-10-11~10_23_44.webp" data-lazy-src="https://cdn.jsdelivr.net/gh/ccknbc-backup/photos/blog/2020-10-06~11_57_17.webp" alt="备份源文件"></p><p>就像下图这样，工作流文件.yml你可以随便命名啦，然后我们在工作流文件中添加如下内容</p><p><img src= "https://cdn.jsdelivr.net/gh/ccknbc-backup/photos/blog/2020-10-11~10_23_44.webp" data-lazy-src="https://cdn.jsdelivr.net/gh/ccknbc-backup/photos/blog/2020-10-06~12_03_33.webp" alt="目录"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Update</span> <span class="string">Blog</span> <span class="string">Butterfly</span> <span class="string">Site</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">name:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&#x27;手动触发&#x27;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v2-beta</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">HEXO</span> <span class="string">CI</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Catch</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v2.1.1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache-dependencies</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache-dependencies.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">        <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/CCKNBC/butterfly.git</span> <span class="string">public</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">        <span class="string">gulp</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;ccknbc&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;ccknbc@qq.com&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">add</span> <span class="string">-A</span></span><br><span class="line">        <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;Updated By Github Actions&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://ccknbc:$<span class="template-variable">&#123;&#123; secrets.GH_TOKEN &#125;&#125;</span>@github.com/ccknbc/butterfly.git&quot;</span> <span class="string">master:master</span></span><br><span class="line">        <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://ccknbc:$<span class="template-variable">&#123;&#123; secrets.GT_TOKEN &#125;&#125;</span>@gitee.com/ccknbc/butterfly.git&quot;</span> <span class="string">master:master</span></span><br><span class="line">        <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$<span class="template-variable">&#123;&#123; secrets.CD_USER &#125;&#125;</span>:$<span class="template-variable">&#123;&#123; secrets.CD_TOKEN &#125;&#125;</span>@e.coding.net/ccknbc/blog/butterfly.git&quot;</span> <span class="string">master:master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Gitee</span> <span class="string">Pages</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">yanglbme/gitee-pages-action@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="attr">gitee-username:</span> <span class="string">ccknbc</span></span><br><span class="line">          <span class="attr">gitee-password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">gitee-repo:</span> <span class="string">ccknbc/butterfly</span></span><br></pre></td></tr></table></figure><div class="note info icon flat"><p>在 workflow 文档流里我们可以用 <code>$</code> 做权限认证，是一个默认存在的变量，并不需要我们去添加 ACCESS_TOKEN</p></div><p>你可能有所疑惑但又看得懂一些命令，别急，请接着往下看</p><h2 id="GitHub-Actions-指南"><a href="#GitHub-Actions-指南" class="headerlink" title="GitHub Actions 指南"></a>GitHub Actions 指南</h2><p><code>GitHub Actions</code>使你可以直接在你的<code>GitHub</code>库中创建自定义的工作流，工作流指的就是自动化的流程，比如构建、测试、打包、发布、部署等等，也就是说你可以直接进行 <code>CI</code>（持续集成）和 <code>CD</code>（持续部署）</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li><p><code>workflow</code>: 一个 <code>workflow</code> 工作流就是一个完整的过程，每个<code>workflow</code> 包含一组 <code>jobs</code>任务</p></li><li><p><code>job : jobs</code>任务包含一个或多个<code>job</code> ，每个 <code>job</code>包含一系列的 <code>steps</code> 步骤</p></li><li><p><code>step</code> : 每个 <code>step</code> 步骤可以执行指令或者使用一个 <code>action</code> 动作</p></li><li><p><code>action</code> : 每个 <code>action</code> 动作就是一个通用的基本单元</p></li></ol><p>说明：</p><ol><li><p>最外层的 <code>name</code> 指定了 <code>workflow</code>的名称</p></li><li><p><code>on</code> 声明了一旦发生了 <code>push</code> 操作就会触发这个 <code>workflow</code></p></li><li><p><code>jobs</code>定义了任务集，其中可以有一个或多个<code>job</code> 任务，示例中只有一个</p></li><li><p><code>runs-on</code> 声明了运行的环境</p></li><li><p><code>steps</code>定义需要执行哪些步骤</p></li><li><p>每个 <code>step</code>可以定义自己的 <code>name</code>和<code>id</code>，通过 <code>uses</code> 可以声明使用一个具体的 <code>action</code>，通过<code>run</code> 声明需要执行哪些指令。</p></li><li><p><code>$&#123;&#123;&#125;&#125;`可以使用上下文参数`on` 声明了何时触发 `workflow`  ，它可以是：1. 一个或多个`GitHub` 事件，比如 `push` 了一个 `commit` 、创建了一个`issue` ，产生了一次`pull request` 等等，示例：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">on:[push,pull_request]</span></span><br></pre></td></tr></table></figure>2. 预定的时间，示例（每天零点零分触发，不过因为时差关系，是北京时间上午8点）：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="string">-cron:&#x27;0</span> <span class="number">0</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*&#x27;</span></span><br></pre></td></tr></table></figure>3. 某个外部事件。所谓外部事件触发，简而言之就是你可以通过`REST API`向 `GitHub` 发送请求去触发，具体请查阅官方文档: `repository-dispatch-event`配置多个事件，示例：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="comment"># Trigger the workflow on push or pull request,</span></span><br><span class="line"><span class="comment"># but only for the master branch</span></span><br><span class="line"><span class="attr">push:</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">pull_request:</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="comment"># Also trigger on page_build, as well as release created events</span></span><br><span class="line"><span class="attr">page_build:</span></span><br><span class="line"><span class="attr">release:</span></span><br><span class="line"><span class="attr">types:</span> <span class="comment"># This configuration does not affect the page_build event above</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">created</span></span><br></pre></td></tr></table></figure>详细文档请参考: 触发事件## jobs`jobs`可以包含一个或多个 `job` ，如:<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">my_first_job:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">My</span> <span class="string">first</span> <span class="string">job</span></span><br><span class="line"><span class="attr">my_second_job:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">My</span> <span class="string">second</span> <span class="string">job</span></span><br></pre></td></tr></table></figure>如果多个`job` 之间存在依赖关系，那么你可能需要使用 `needs` :<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">job1:</span></span><br><span class="line"><span class="attr">job2:</span></span><br><span class="line"><span class="attr">needs:</span> <span class="string">job1</span></span><br><span class="line"><span class="attr">job3:</span></span><br><span class="line"><span class="attr">needs:</span> [<span class="string">job1</span>, <span class="string">job2</span>]</span><br></pre></td></tr></table></figure>这里的`needs`声明了`job2` 必须等待 `job1` 成功完成，`job3`必须等待 `job1` 和 `job2`依次成功完成每个任务默认超时时间最长为 `360`分钟，你可以通过 `timeout-minutes` 进行配置:<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">job1:</span></span><br><span class="line"><span class="attr">timeout-minutes:</span></span><br></pre></td></tr></table></figure>## runs-on & strategy`runs-on` 指定了任务的 `runner` 即执行环境，`runner` 分两种：`GitHub-hosted runner` 和 `self-hosted runner` 所谓的 `self-hosted runner` 就是用你自己的机器，但是需要 `GitHub` 能进行访问并给与其所需的机器权限，这个不在本文描述范围内，有兴趣可参考 `self-hosted runner` `GitHub-hosted runner` 其实就是 `GitHub` 提供的虚拟环境，目前有以下四种:1. `windows-latest : Windows Server 2019`2. `ubuntu-latest`或 `ubuntu-18.04`3. `ubuntu-16.04` : `Ubuntu 16.04`4. `macos-latest` : `macOS Catalina 10.15`比较常见的:<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">runs-on:ubuntu-latest</span></span><br></pre></td></tr></table></figure>## runs-on 多环境有时候我们常常需要对多个操作系统、多个平台、多个编程语言版本进行测试，为此我们可以配置一个构建矩阵例如：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runs-on:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">strategy:</span></span><br><span class="line"><span class="attr">matrix:</span></span><br><span class="line"><span class="attr">os:</span> [<span class="string">ubuntu-16.04</span>, <span class="string">ubuntu-18.04</span>]</span><br><span class="line"><span class="attr">node:</span> [<span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure>示例中配置了两种`os`操作系统和三种 `node`版本即总共六种情况的构建矩阵， `$&#123;&#123;matrix.os&#125;&#125;</code> 是一个上下文参数</p></li></ol><p><code>strategy</code> 策略，包括：</p><ol><li><p><code>matrix</code>: 构建矩阵</p></li><li><p><code>fail-fast</code> : 默认为<code>true</code> ，即一旦某个矩阵任务失败则立即取消所有还在进行中的任务</p></li><li><p><code>max-paraller</code> : 可同时执行的最大并发数，默认情况下 <code>GitHub</code> 会动态调整</p></li></ol><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runs-on:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">strategy:</span></span><br><span class="line"><span class="attr">matrix:</span></span><br><span class="line"><span class="attr">os:</span> [<span class="string">macos-latest</span>, <span class="string">windows-latest</span>, <span class="string">ubuntu-18.04</span>]</span><br><span class="line"><span class="attr">node:</span> [<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="comment"># includes a new variable of npm with a value of 2 for the matrix leg matching the os and version</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">os:</span> <span class="string">windows-latest</span></span><br><span class="line"><span class="attr">node:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">npm:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>include</code>声明了 <code>os</code> 为 <code>windows-latest</code> 时，增加一个 <code>node</code>和<code>npm</code>分别使用特定的版本的矩阵环境</p><p>与<code>include</code> 相反的就是<code>exclude</code> ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runs-on:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">strategy:</span></span><br><span class="line"><span class="attr">matrix:</span></span><br><span class="line"><span class="attr">os:</span> [<span class="string">macos-latest</span>, <span class="string">windows-latest</span>, <span class="string">ubuntu-18.04</span>]</span><br><span class="line"><span class="attr">node:</span> [<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="comment"># excludes node 4 on macOS</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">os:</span> <span class="string">macos-latest</span></span><br><span class="line"><span class="attr">node:</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p><code>exclude</code> 用来删除特定的配置项，比如这里当<code>os</code> 为 <code>macos-latest</code>，将 <code>node</code>为 4 的版本从构建矩阵中移除</p><h2 id="steps"><a href="#steps" class="headerlink" title="steps"></a>steps</h2><p><code>steps</code> 的通用格式类似于：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&lt;step_name&gt;</span></span><br><span class="line"><span class="attr">uses:</span> <span class="string">&lt;action&gt;</span></span><br><span class="line"><span class="attr">with:</span></span><br><span class="line"><span class="string">&lt;parameter_name&gt;:</span> <span class="string">&lt;parameter_value&gt;</span></span><br><span class="line"><span class="attr">id:</span> <span class="string">&lt;step_id&gt;</span></span><br><span class="line"><span class="attr">continue-on-error:</span> <span class="literal">true</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&lt;step_name&gt;</span></span><br><span class="line"><span class="attr">timeout-minutes:</span></span><br><span class="line"><span class="attr">run:</span> <span class="string">&lt;commands&gt;</span></span><br></pre></td></tr></table></figure><p>每个 <code>step</code> 步骤可以有:</p><ol><li><p><code>id</code> : 每个步骤的唯一标识符</p></li><li><p><code>name</code> : 步骤的名称</p></li><li><p><code>uses</code> : 使用哪个<code>action</code></p></li><li><p><code>run</code>: 执行哪些指令</p></li><li><p><code>with</code>: 指定某个<code>action</code> 可能需要输入的参数</p></li><li><p><code>continue-on-error</code> : 设置为 <code>true</code> 允许此步骤失败<code>job</code> 仍然通过</p></li><li><p><code>timeout-minutes : step</code> 的超时时间</p></li></ol><h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><p><code>action</code> 动作通常是可以通用的，这意味着你可以直接使用别人定义好的<code>action</code></p><h2 id="checkout-action"><a href="#checkout-action" class="headerlink" title="checkout action"></a>checkout action</h2><p><code>checkout action</code> 是一个标准动作，当以下情况时必须且需要率先使用:</p><ol><li><p><code>workflow</code> 需要项目库的代码副本，比如构建、测试、或持续集成这些操作</p></li><li><p><code>workflow</code> 中至少有一个 <code>action</code>是在同一个项目库下定义的</p></li></ol><p>使用示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">users:action/checkout@v1</span></span><br></pre></td></tr></table></figure><p>如果你只想浅克隆你的库，或者只复制最新的版本，你可以在 <code>with</code>中使用<code>fetch-depth</code>声明，例如:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">user:action/checkout@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">  <span class="string">fetch-depth:1</span></span><br></pre></td></tr></table></figure><h2 id="引用-action"><a href="#引用-action" class="headerlink" title="引用 action"></a>引用 action</h2><ol><li><p>官方<code>action</code>标准库: github.com/actions</p></li><li><p>社区库:<code>marketplace</code></p></li></ol><h2 id="引用公有库中的-action"><a href="#引用公有库中的-action" class="headerlink" title="引用公有库中的 action"></a>引用公有库中的 action</h2><p>引用 <code>action</code> 的格式是<code>&#123;owner&#125;/&#123;repo&#125;@&#123;ref&#125;</code>或 <code>&#123;owner&#125;/&#123;repo&#125;/&#123;path&#125;@&#123;ref&#125;</code>，例如上例的中<code>actions/checkout@v1</code>，你还可以使用标准库中的其它 <code>action</code>，如设置 <code>node</code> 版本:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">my_first_job:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">My</span> <span class="string">Job</span> <span class="string">Name</span></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line"><span class="attr">with:</span></span><br><span class="line"><span class="attr">node-version:</span> <span class="number">10.</span><span class="string">x</span></span><br></pre></td></tr></table></figure><h2 id="引用同一个库中的-action"><a href="#引用同一个库中的-action" class="headerlink" title="引用同一个库中的 action"></a>引用同一个库中的 action</h2><p>引用格式：<code>&#123;owner&#125;/&#123;repo&#125;@&#123;ref&#125;</code>或 <code>./path/to/dir</code></p><p>例如项目文件结构为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">--</span> <span class="string">hello-world</span> <span class="string">(repository)</span></span><br><span class="line"> <span class="string">|__</span> <span class="string">.github</span></span><br><span class="line"> <span class="string">└──</span> <span class="string">workflows</span></span><br><span class="line"> <span class="string">└──</span> <span class="string">my-first-workflow.yml</span></span><br><span class="line"> <span class="string">└──</span> <span class="string">actions</span></span><br><span class="line"> <span class="string">|__</span> <span class="string">hello-world-action</span></span><br><span class="line"> <span class="string">└──</span> <span class="string">action.yml</span></span><br></pre></td></tr></table></figure><p>当你想要在<code>workflow</code> 中引用自己的<code>action</code> 时可以：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line"><span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="comment"># This step checks out a copy of your repository.</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="comment"># This step references the directory that contains the action.</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">./.github/actions/hello-world-action</span></span><br></pre></td></tr></table></figure><h2 id="引用-Docker-Hub-上的-container"><a href="#引用-Docker-Hub-上的-container" class="headerlink" title="引用 Docker Hub 上的 container"></a>引用 Docker Hub 上的 container</h2><p>如果某个 <code>action</code> 定义在了一个<code>docker container image</code> 中且推送到了<code>Docker Hub</code> 上，你也可以引入它，格式是<code>docker://&#123;image&#125;:&#123;tag&#125;</code> ，示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">my_first_job:</span></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">My</span> <span class="string">first</span> <span class="string">step</span></span><br><span class="line"><span class="attr">uses:</span> <span class="string">docker://alpine:3.8</span></span><br></pre></td></tr></table></figure><p>更多信息参考:<code>Docker-image.yml workflow</code> 和<code>Creating a Docker container ``action</code></p><h2 id="构建-actions"><a href="#构建-actions" class="headerlink" title="构建 actions"></a>构建 actions</h2><p>请参考：<code>building-actions</code></p><h2 id="env"><a href="#env" class="headerlink" title="env"></a>env</h2><p>环境变量可以配置在以下地方:</p><ol><li><p><code>env</code></p></li><li><p><code>jobs.&lt;job_id&gt;.env</code></p></li><li><p><code>jobs.&lt;job_id&gt;.steps.env</code></p></li></ol><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">NODE_ENV:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">job1:</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">NODE_ENV:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">NODE_ENV:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure><p>如果重复，优先使用最近的那个</p><h2 id="if-amp-context"><a href="#if-amp-context" class="headerlink" title="if &amp; context"></a>if &amp; context</h2><p>你可以在 <code>job</code>和<code>step</code>中使用<code>if</code>条件语句，只有满足条件时才执行具体的<code>job</code> 或 <code>step</code> :</p><ol><li><p><code>jobs.&lt;job_id&gt;.if</code></p></li><li><p><code>jobs.&lt;job_id&gt;.steps.if</code></p></li></ol><p>任务状态检查函数:</p><ol start="3"><li><p><code>success()</code> : 当上一步执行成功时返回 <code>true</code></p></li><li><p><code>always()</code> : 总是返回 <code>true</code></p></li><li><p><code>cancelled()</code> : 当 <code>workflow</code>被取消时返回 <code>true</code></p></li><li><p><code>failure()</code> : 当上一步执行失败时返回 <code>true</code></p></li></ol><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">step1</span></span><br><span class="line"><span class="attr">if:</span> <span class="string">always()</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">step2</span></span><br><span class="line"><span class="attr">if:</span> <span class="string">success()</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">step3</span></span><br><span class="line"><span class="attr">if:</span> <span class="string">failure()</span></span><br></pre></td></tr></table></figure><p>意思就是 <code>step1</code>总是执行，<code>step2</code> 需要上一步执行成功才执行，<code>step3</code> 只有当上一步执行失败才执行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$&#123;&#123;&lt;expression&gt;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>上下文和表达式: <code>$&#123;&#123;<expression>&#125;&#125; </expression></code></p><p>有时候我们需要与第三方平台进行交互，这时候通常需要配置一个<code>token</code>，但是显然这个 <code>token</code> 不可能明文使用，这种个情况下我们要做的就是：</p><ol><li>在具体 <code>repository</code> 库<code>Settings</code> 的 <code>Secrets</code> 中添加一个密钥，如 <code>SOMEONE_TOKEN</code></li></ol><div class="note warning flat"><p>注：关于如何获取github或者其他平台的密钥及授权不是本文重点，大家可以自行百度 </p></div><ol start="2"><li>然后在<code>workflow</code>中就可以通过 <code>$&#123;&#123;secrets.SOMEONE_TOKEN&#125;&#125;</code> 将 <code>token</code>安全地传递给环境变量</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">My</span> <span class="string">first</span> <span class="string">action</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">SOMEONE_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SOMEONE_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>这里的<code>secrets</code> 就是一个上下文，除此之外还有很多，比如：</p><ol><li><p><code>github.event_name</code> : 触发<code>workflow</code>的事件名称</p></li><li><p><code>job.status</code> : 当前<code>job</code> 的状态，如 <code>success, failure, or cancelled</code></p></li><li><p><code>steps.&lt;step id&gt;.outputs</code> : 某个 <code>action</code> 的输出</p></li><li><p><code>runner.os : runner</code>的操作系统如 <code>Linux, Windows, or macOS</code></p></li></ol><p>这里只列举了少数几个</p><p>另外在<code>if</code> 中使用时不需要 <code>$&#123;&#123;&#125;&#125;</code> 符号，比如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">My</span> <span class="string">first</span> <span class="string">step</span></span><br><span class="line"><span class="attr">if:</span> <span class="string">github.event_name</span> <span class="string">==</span> <span class="string">&#x27;pull_request&#x27;</span> <span class="string">&amp;&amp;</span> <span class="string">github.event.action</span> <span class="string">==</span> <span class="string">&#x27;unassigned&#x27;</span></span><br><span class="line"><span class="attr">run:</span> <span class="string">echo</span> <span class="string">This</span> <span class="string">event</span> <span class="string">is</span> <span class="string">a</span> <span class="string">pull</span> <span class="string">request</span> <span class="string">that</span> <span class="string">had</span> <span class="string">an</span> <span class="string">assignee</span> <span class="string">removed.</span></span><br></pre></td></tr></table></figure><p>上下文和表达式详细信息请参考：<code>contexts-and-expression</code></p><p>看到这里你应该对示例文件有了一定的理解，并且想自己去实验一下了，那就去actions页面找到官方示例去体验一下吧</p><p>但对于为什么要备份<code>package.json</code>我想大家还是心存疑惑，那我们看看具体内容吧</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;5.2.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;cheerio&quot;</span>: <span class="string">&quot;^1.0.0-rc.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-htmlmin&quot;</span>: <span class="string">&quot;^5.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span>: <span class="string">&quot;^5.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-baidupush&quot;</span>: <span class="string">&quot;^1.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-charts&quot;</span>: <span class="string">&quot;^1.0.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-cli&quot;</span>: <span class="string">&quot;^4.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-deployer-git&quot;</span>: <span class="string">&quot;^2.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-baidu-sitemap&quot;</span>: <span class="string">&quot;^0.1.9&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-feed&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-search&quot;</span>: <span class="string">&quot;^2.4.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-sitemap&quot;</span>: <span class="string">&quot;^2.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-render-pug&quot;</span>: <span class="string">&quot;^2.1.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^3.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-pug&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^2.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-tag-aplayer&quot;</span>: <span class="string">&quot;^3.0.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-wordcount&quot;</span>: <span class="string">&quot;^6.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;pump&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;terser&quot;</span>: <span class="string">&quot;^4.8.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;gulp&quot;</span>: <span class="string">&quot;4.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-cli&quot;</span>: <span class="string">&quot;2.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-clean-css&quot;</span>: <span class="string">&quot;^4.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-htmlclean&quot;</span>: <span class="string">&quot;^2.7.22&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-uglify&quot;</span>: <span class="string">&quot;^3.0.2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到里面包含了npm脚本和一些依赖（包含dev版本的），有了这个文件我们只需执行npm i(install)即可自动安装所以所需依赖插件，而不用一个一个去敲一堆命令啦，理解了这个简单的例子，大家在部署其他项目时也许能更得心应手吧</p><p>今天的分享就到这里结束了，本文还有很多纰漏还请读者指出，后续将更正，下篇文章见</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Github Actions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Github Actions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈敏捷开发</title>
      <link href="2020/12/17/agility/"/>
      <url>2020/12/17/agility/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="#%E8%B0%88%E8%B0%88%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91">谈谈敏捷开发</a></li><li><a href="#%E5%B0%8F%E6%AD%A5%E5%BF%AB%E8%B7%91%E3%80%81%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91">小步快跑、敏捷开发</a></li><li><a href="#%E7%9C%9F%E5%AE%9E%E7%9A%84%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91">真实的敏捷开发</a></li><li><a href="#%E5%90%8E%E6%B3%A8">后注</a></li></ol><h1 id="谈谈敏捷开发"><a href="#谈谈敏捷开发" class="headerlink" title="谈谈敏捷开发"></a><a href="#%E8%B0%88%E8%B0%88%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91">谈谈敏捷开发</a></h1><p>好久没有更新一下博客，最近有在尝试新的领域，可是一直没能积累下什么重要的知识、或者形成了什么重要的知识体系，就没能写下什么有意义的记录。可是很偶然的机会看到一个视频，里面讲述的，乔布斯谈论关于【流程与人才】的理解，基本可以总结为：苹果没有像 IBM 一样衰落，很大一部分原因是苹果没有执行像 IBM 一样严格的流程管理，使得有能力、有才华的人才能够不受大公司中条条框框的约束，充分发挥自己优势，最终促使苹果一次又一次的震惊世界。</p><p>看到这个视频的时候，脑子中转过了好多好多的话语，没能按耐住自己的情绪，终究还是在 Twitter 中直接开喷。当然，喷的并不是乔布斯或者是他的言论，<strong>乔帮主</strong>在国内一波又一波媒体、开发者的吹捧下，早就已经走上了“冰封王座”。他的一生、创办苹果的风风雨雨，相信拜读过《乔布斯传》的人都能已经耳熟能详了，这里不再细说。总而言之，对于笔者自身，远远还达不到批判他的言辞的资格。</p><blockquote><p>废话说了那么多，结果原来只是像表达自己的弱小</p></blockquote><p>乔布斯确实过于优秀了，以至于越来越多的年轻人、创业者，都想要向他学习，见贤思齐焉。而学习最简单不过的方式，就是模仿。现在越来越容易听到那些晦涩难懂，可是由显得高端深奥的词汇。似乎在这种谈吐中更容易体现出自身对于产品思考的深入。</p><p>“把握用户体验”，“重新定义 XX”，甚至 “打破流程”。“ IBM 之所以没落，就是因为他大公司中繁重的流程，约束的条条框框。” 所以我们要注重人才的才华展示，淡化流程。乔布斯所表达的观点，我们全盘接受。</p><p>这样子的学习，简单至极。</p><p><strong>流程不再重要了。</strong>—— 这就是为什么现在产品经理跟开发工程师之间存在如此对立的原因。</p><p>当然，其实乔布斯并非推动国内各大企业打破传统、废除流程的唯一功臣，另外一个更广为人知的，当然是数早已被广为人知的、被誉为中国第一产品经理的 —— 张小龙。如果你不知道这个人的话，你可以点击 (Ctrl+W) 组合键，快速查询这个人的相关信息。^_^ 得益于他的知名度以及微信的成功，“打破流程”、“简化流程”、“把握用户体验” 获得了一个更加接地气的名称 —— “<strong>小步快跑，敏捷开发</strong>”。</p><p>对比于传统应用开发方式，敏捷开发在当前互联网形式上确为更加合适，毫不夸张的说，如果目前的产品开发还按照从前的开发形式，普通创业公司绝大部分会在产品推出之前，就将所有的开发经费耗光。这个时候没有任何知名度、也没有成型的产品，根本无从谈起融资以及上市。</p><h2 id="小步快跑、敏捷开发"><a href="#小步快跑、敏捷开发" class="headerlink" title="小步快跑、敏捷开发"></a><a href="#%E5%B0%8F%E6%AD%A5%E5%BF%AB%E8%B7%91%E3%80%81%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91">小步快跑、敏捷开发</a></h2><p>仔细考虑，其实这种开发方式在起步阶段是比较合理的。一周一个小版本，一个月一个大版本，对每次开发的新功能做好足够的调研以及打点统计，能够在不进行市场调查的前提上获取用户对于功能的喜好程度，从而在后续的开发中对特定的功能进行资源的倾斜，更大程度上去<strong>取悦用户</strong>。<br>不得不说，微信在初期发展中，摸索到了<strong>摇一摇</strong>以及<strong>朋友圈</strong>这两大功能，然后持续在上面增加功能，优化体验，让用户真正的粘附在了微信生态上，也算是对小步快跑、敏捷开发的很好体现。微信的成功，也让更多的公司相信这种开发模式的正确性。</p><p>我们来仔细捋一下这种开发模式的要点：</p><ol><li>小版本周期短</li><li>小版本所携带新功能有针对性</li><li>开发过程中对新功能做好打点统计</li><li>产品上线后进行需求复盘，通过统计上报，得知用户对于新功能的喜好程度</li><li>对下一新版本的开发计划进行评估</li></ol><p>其中，复盘步骤对于敏捷开发的模式尤为重要。并且不仅是产品经理，包括开发人员都需要参与到复盘的步骤中。对于一个开发人员，得知自己所开发功能受到用户的喜爱，自身对于下个版本的开发积极性也会有相应的提高。</p><h2 id="真实的敏捷开发"><a href="#真实的敏捷开发" class="headerlink" title="真实的敏捷开发"></a><a href="#%E7%9C%9F%E5%AE%9E%E7%9A%84%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91">真实的敏捷开发</a></h2><p>可是，有多少公司又能很好地在版本迭代的过程中持续遵循上述的要点呢？不少的公司更多的只是喊着敏捷开发的口号，在更短的时间内，往产品中堆砌着更多的功能，从而导致开发人员在长时间内一直保持着难以接受的开发强度，最终导致人员的流失，项目的失败。</p><p>笔者从自身的工作环境中，感受到两点：</p><ul><li>老板过多地参与进项目开发的细节中</li><li>复盘步骤的缺失，或者复盘步骤对于产品经理们的负反馈缺失</li></ul><p>笔者对于第一点真是深有体会。其实老板们关注细节无可厚非，可是过多的参与到项目开发中，很容易导致到开发节奏混乱，无法保持小版本迭代的步骤中。因为版本开发迭代期间，并不会频繁地推送到老板处体验，只能在项目上线阶段提交给老板进行上线前的最后体验。正常情况下，老板应该对这个功能开发进行最后的确认，确认这个版本是否与开发初期所定下的发展方向一致，而不应该对细节进行过多的反馈，一来这个环节在开发过程中早就经过产品经理的把控；二来开发人员、乃至于产品经理，都很难对老板所提出的细节要求说不，容易导致项目进度一拖再拖。三来甚至会过度打击产品经理的积极性，最终导致产品经理不再创新，只会揣测老板的心思。</p><p>即便是成功至此的微信，笔者感觉它都已经不再是认真遵循着敏捷开发的模式了，大家可以从微信的招聘口号中可以感受一下：</p><blockquote><p>做一个伟大的产品来取悦–<strong>自己</strong>。</p></blockquote><h2 id="后注"><a href="#后注" class="headerlink" title="后注"></a><a href="#%E5%90%8E%E6%B3%A8">后注</a></h2><p>毕竟这片文章只是有感而发，想到哪写到哪，尚未经过深入思考。请读者们轻喷。</p>]]></content>
      
      
      <categories>
          
          <category> 开发技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 解决 InsecurePlatformWarning</title>
      <link href="2020/12/17/Python/"/>
      <url>2020/12/17/Python/</url>
      
        <content type="html"><![CDATA[<h3 id="在安装Python库的时候，遇到一些问题。虽然，还是遇到问题了"><a href="#在安装Python库的时候，遇到一些问题。虽然，还是遇到问题了" class="headerlink" title="在安装Python库的时候，遇到一些问题。虽然，还是遇到问题了:"></a>在安装Python库的时候，遇到一些问题。虽然，还是遇到问题了:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Collecting PyMySQL</span><br><span class="line">&#x2F;Users&#x2F;fdhuang&#x2F;py27&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;requests&#x2F;packages&#x2F;urllib3&#x2F;util&#x2F;ssl_.py:79: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. For more information, see https:&#x2F;&#x2F;urllib3.readthedocs.org&#x2F;en&#x2F;latest&#x2F;security.html#insecureplatformwarning.</span><br><span class="line">  InsecurePlatformWarning</span><br><span class="line">  Downloading PyMySQL-0.6.6-py2.py3-none-any.whl (66kB)</span><br><span class="line">    100% |████████████████████████████████| 69kB 225kB&#x2F;s</span><br><span class="line">Installing collected packages: PyMySQL</span><br><span class="line">Successfully installed PyMySQL-0.6.6</span><br></pre></td></tr></table></figure><h3 id="因为SSL的问题，urllib3需要pyopenssl。"><a href="#因为SSL的问题，urllib3需要pyopenssl。" class="headerlink" title="因为SSL的问题，urllib3需要pyopenssl。"></a>因为SSL的问题，urllib3需要pyopenssl。</h3><p>最简单的方法是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pyopenssl ndg-httpsclient pyasn1</span><br></pre></td></tr></table></figure><p>还需要安装libffi-dev，libssl-dev</p><h3 id="Ubuntu下安装"><a href="#Ubuntu下安装" class="headerlink" title="Ubuntu下安装"></a>Ubuntu下安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libffi-dev libssl-dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>耀企GIT使用规范 v2.0</title>
      <link href="2020/12/07/git/"/>
      <url>2020/12/07/git/</url>
      
        <content type="html"><![CDATA[<h1 id="耀企GIT使用规范-v2-0"><a href="#耀企GIT使用规范-v2-0" class="headerlink" title="耀企GIT使用规范 v2.0"></a>耀企GIT使用规范 v2.0</h1><blockquote><p>Git usage standards version 2.0</p></blockquote><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>每一个优秀的开发团队都会用到一套代码管理工具。根据目前最流行的代码管理工具非<code>GIT</code>莫属。不例外耀企团队绝对使用最优秀的规范和工具。根据耀企项目的具体部署环境，开发规范，我们有一套自己的规范和标准的<code>GIT</code>使用方式。</p><h1 id="敏捷迭代"><a href="#敏捷迭代" class="headerlink" title="敏捷迭代"></a>敏捷迭代</h1><pre><code>如果要弄明白耀企的GIT使用，首先要了解清楚耀企项目的迭代流程</code></pre><p><img src= "https://cdn.jsdelivr.net/gh/ccknbc-backup/photos/blog/2020-10-11~10_23_44.webp" data-lazy-src="/2020/12/07/git/agile_development.png"></p><h4 id="什么是敏捷迭代？"><a href="#什么是敏捷迭代？" class="headerlink" title="什么是敏捷迭代？"></a>什么是敏捷迭代？</h4><blockquote><p>敏捷迭代就是把开发周期缩短到1-4周。小步快跑的迅速迭代交付功能上线。敏捷迭代的流程分别如下：</p></blockquote><ol><li>确定需求 - <em>与老板和市场确认需求和流程</em></li><li>需求评审 - <em>与开发同频需求里面的功能点和业务流程</em></li><li>技术反讲 - <em>开发与产品同频需求，保证理解没有误区，开发也需要评估开发难度，和开发时间</em></li><li>研发周期 - <em>开发人员开始投入研发直接到功能和需求开发完毕，转交给测试，在测试环境提测</em></li><li>测试周期 - <em>测试和开发人员开始排除困难，修复所有在开发过程产生的bug</em></li><li>验收/预发布周期 - <em>当测试在测试环境把所有bug排除掉后，当前迭代版本就会发布到预发布环境让市场和产品验收功能</em></li><li>发布正式 - <em>当验收通过后，当前迭代版本就可以部署上先到正式环境</em></li><li>正式回归测试 - <em>发布上线后，就会有正式回归测试，最有一道防线，保证系统加入了所有新功能都没有问题</em></li><li>迭代总结 - <em>每一期迭代结束后都总结这次迭代遇到的问题，持续优化，提高效率</em></li></ol><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><p><img src= "https://cdn.jsdelivr.net/gh/ccknbc-backup/photos/blog/2020-10-11~10_23_44.webp" data-lazy-src="/2020/12/07/git/agile_dev_envs.png"></p><pre><code>开发环境和git分支是一一对应的。</code></pre><ul><li>版本开发环境 - <em>dev/x.x.x 版本分支</em></li><li>测试/联调环境 - <em>qa/qa1，qa/qa2，qa/qa3 3个测试环境和分支</em></li><li>预发布/验收环境 - <em>release分支</em></li><li>正式线上环境 - <em>master分支</em></li></ul><h1 id="Git操作场景"><a href="#Git操作场景" class="headerlink" title="Git操作场景"></a>Git操作场景</h1><pre><code>这里我们按照实际开发流程和实际场景来解说怎么使用git</code></pre><blockquote><h3 id="开启新版本迭代"><a href="#开启新版本迭代" class="headerlink" title="开启新版本迭代"></a>开启新版本迭代</h3><p><img src= "https://cdn.jsdelivr.net/gh/ccknbc-backup/photos/blog/2020-10-11~10_23_44.webp" data-lazy-src="/2020/12/07/git/start_agile.png"></p></blockquote><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol><li>从master分支创建一个版本分支</li><li>创建版本分支后根据不同的端做不同的处理<ul><li>前端：需要把接口版本好改为当前迭代的接口版本号</li><li>后端：先创建对应当前迭代的接口版本好控制器和路由，然后合并就版本的控制器更变。</li></ul></li></ol><blockquote><h3 id="开发周期版本提测-bug修复提测"><a href="#开发周期版本提测-bug修复提测" class="headerlink" title="开发周期版本提测/bug修复提测"></a>开发周期版本提测/bug修复提测</h3><p><img src= "https://cdn.jsdelivr.net/gh/ccknbc-backup/photos/blog/2020-10-11~10_23_44.webp" data-lazy-src="/2020/12/07/git/agile_qa_start.png"></p></blockquote><pre><code>提验收必须从版本分支合并qa分支</code></pre><h4 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol><li>版本分支合并(merge)对应的测试分支(qa)</li><li>版本分支代码合并后对应的qa环境会自动部署代码到对应的环境服务器上</li></ol><blockquote><h3 id="开发周期版本提验收-bug修复提验收"><a href="#开发周期版本提验收-bug修复提验收" class="headerlink" title="开发周期版本提验收/bug修复提验收"></a>开发周期版本提验收/bug修复提验收</h3><p><img src= "https://cdn.jsdelivr.net/gh/ccknbc-backup/photos/blog/2020-10-11~10_23_44.webp" data-lazy-src="/2020/12/07/git/agile_stage_start.png"></p></blockquote><pre><code>提测必须从版本分支合并验收(release)分支</code></pre><h4 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol><li>版本分支合并(merge)验收分支(release)</li><li>版本分支代码合并release环境会自动部署代码到环境服务器上<ul><li>如果是修复bug，就要先合并对应的qa分支后合并release分支。</li></ul></li></ol><blockquote><h3 id="使用前版本修复上线流程"><a href="#使用前版本修复上线流程" class="headerlink" title="使用前版本修复上线流程"></a>使用前版本修复上线流程</h3><p><img src= "https://cdn.jsdelivr.net/gh/ccknbc-backup/photos/blog/2020-10-11~10_23_44.webp" data-lazy-src="/2020/12/07/git/agile_bugfix.png"></p></blockquote><h4 id="操作步骤-3"><a href="#操作步骤-3" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol><li>使用当前<code>正式所在的版本</code>找到对应的<code>版本分支</code>作为修复分支</li><li>修复完成后合并对应的qa环境提测，然后提醒测试开始回归测试修复</li><li>测试环境测试通过后把修复分支合并release分支，然后提醒测试在验收环境验收修复</li><li>验收通过后，就可以通知开发组长以上的负责人合并master分支上线，然后通知测试在线上回归测试</li><li>在线上回归通过后，就可以把修复分支分别合并到<code>当前迭代版本分支</code></li></ol><blockquote><h3 id="紧急修复上线流程"><a href="#紧急修复上线流程" class="headerlink" title="紧急修复上线流程"></a>紧急修复上线流程</h3></blockquote><ul><li>如果当前bug是很严重的，影响到用户使用的才需要使用紧急修复上线流程</li><li>紧急修复上线必须先创建紧急修复(hotfix)分支<br><img src= "https://cdn.jsdelivr.net/gh/ccknbc-backup/photos/blog/2020-10-11~10_23_44.webp" data-lazy-src="/2020/12/07/git/agile_hotfix.png"></li></ul><h4 id="操作步骤-4"><a href="#操作步骤-4" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol><li>首先使用master分支创建紧急修复分支(hotfix/xxxx) - 使用<code>hotfix</code>前缀</li><li>修复完成后合并对应的qa环境提测，然后提醒测试开始回归测试修复</li><li>测试环境测试通过后把修复分支合并release分支，然后提醒测试在验收环境验收修复</li><li>验收通过后，就可以通知开发组长以上的负责人合并master分支上线，然后通知测试在线上回归测试</li><li>在线上回归通过后，就可以把修复分支分别合并到<code>前版本分支</code>和<code>当前迭代版本分支</code></li><li>最后在<code>本地(local)</code>和<code>远程(origin)</code>删除修复分支</li></ol><blockquote><h3 id="后端代码部署操作流程"><a href="#后端代码部署操作流程" class="headerlink" title="后端代码部署操作流程"></a>后端代码部署操作流程</h3></blockquote><ul><li>因为后端把不同模块都独立成一个composer包，所以git合并和部署流程跟前端是有区别的。这里分开来说明流程。<br><img src= "https://cdn.jsdelivr.net/gh/ccknbc-backup/photos/blog/2020-10-11~10_23_44.webp" data-lazy-src="/2020/12/07/git/agile_backend_git.png"></li></ul><h4 id="操作步骤-5"><a href="#操作步骤-5" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol><li>首先用每个<code>模块</code>的<code>版本分支</code>合并对应的qa分支</li><li>然后切换到<code>Foundation</code>应用，然后推送对应的环境发起环境部署<ul><li>如果涉及多个模块需要同时发布，那就先把所有模块先合并好环境分支，然后再推Foundation。因为Foundation的某个环境启动了部署，必须部署完后才能发起下一次部署。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 耀企云库 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
