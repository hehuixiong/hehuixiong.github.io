[{"title":"Markdown 直接转换公众号文章，不再为排版花时间","url":"/2020/12/03/Markdown 直接转换公众号文章，不再为排版花时间/","content":"[公众号 Markdown 编辑器](http://prod.zkqiang.cn/wxeditor)\n![](http://static.zkqiang.cn/images/20190913221225.png-slim)\n\n这是我基于一位大佬 @Lyric 开发的项目，进行 Fork 后的二次开发，因为原项目已经几个月没更新，有一些排版 BUG；而且我需要对样式进行个性化定制，有一些逻辑与原项目有冲突之处，所以没有选择 PR。\n\n上面截图，也就是我目前发文的格式，这是我自己定制的主题样式。\n\n## [#有多好用？](#有多好用？)\n\n先介绍下使用方式：在其他 Markdown 编辑器里写文章，全文粘贴到左栏，然后复制右栏，再粘贴到公众号后台，完了！\n\n不需要再有多余的步骤，你复制过去的样式就是右栏看到的。\n\n![](http://static.zkqiang.cn/images/20190913213757.png-slim)\n\n当然你也可以进行微调，比如添加字体的衬线、改字号，也有原作者提供的两种主题样式可选。\n\n就是这款编辑器彻底**解放**了我。\n\n毕竟我是公众号新人，对排版这种事情处于小白级别。我也知道传统情况下，文章写好只是发文的前半部分，还需要花大量时间去排版，给读者舒服的感觉，而该项目直接省掉了后半部分的时间，可以更专注于写作。\n\n> 另外，虽然是面向公众号，但经过测试，在其他不支持 Markdown 的平台上也同样可以使用。\n\n## [#更多细节](#更多细节)\n\n### [#代码块](#代码块)\n\n通过定制支持了代码高亮的配色，我这里使用了大家熟悉的 Github 配色。\n\n![](http://static.zkqiang.cn/images/20190913214602.png-slim)\n\n### [#注音符号](#注音符号)\n\n这个是通过第三方库实现的，可以搞一些比如「丧心病狂{gàn・de・piào・liàng}」很有意思的效果。\n\n![](http://static.zkqiang.cn/images/20190913214803.png-slim)\n\n### [#引用](#引用)\n\n这也是个很有意思的功能点，公众号文章里放微信之外的链接，是无法点击跳转的，所以原作者把这种链接全部放在了文章末尾，就像学术文章的出处引用一样。\n\n![](http://static.zkqiang.cn/images/20190913215245.png-slim)\n\n其他的细节可以看编辑器的默认文章。\n\n## [#定制自己的样式](#定制自己的样式)\n\n如果你不想和我雷同，或者觉得我的样式不好看，那也可以自己再定制，只需要一点前端 CSS 基础即可。\n\n这里不建议你 Fork 后开发自用，我希望大家可以把更多样式 PR 给我，放入项目中开源出去。\n\n另外我还会对编辑器里面的逻辑进行优化，还有一些基础功能也暂时缺失，比如没有保存、没有修改高亮样式、没有在页面就能改各种样式的功能，这些都在我计划之内，如果你有更好的想法也欢迎发给我。\n\n[>>>>> 公众号编辑器地址 <<<<<](http://prod.zkqiang.cn/wxeditor)","categories":["Markdown"]},{"title":"Python 解决 InsecurePlatformWarning: A true SSLContext object is not available.","url":"/2020/12/03/Python 解决 InsecurePlatformWarning/","content":"### 在安装Python库的时候，遇到一些问题。虽然，还是遇到问题了:\n\n``` code\nCollecting PyMySQL\n/Users/fdhuang/py27/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/util/ssl_.py:79: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. For more information, see https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning.\n  InsecurePlatformWarning\n  Downloading PyMySQL-0.6.6-py2.py3-none-any.whl (66kB)\n    100% |████████████████████████████████| 69kB 225kB/s\nInstalling collected packages: PyMySQL\nSuccessfully installed PyMySQL-0.6.6\n```\n### 因为SSL的问题，urllib3需要pyopenssl。\n最简单的方法是\n``` bash\n$ pip install pyopenssl ndg-httpsclient pyasn1\n```\n还需要安装libffi-dev，libssl-dev\n\n### Ubuntu下安装\n\n``` bash\n$ sudo apt-get install libffi-dev libssl-dev\n```\n","categories":["Python"]},{"title":"前端技能训练: 重构一","url":"/2020/12/03/前端技能训练: 重构一/","content":"或许你应该知道了，重构是怎样的，你也知道重构能带来什么。在我刚开始学重构和设计模式的时候，我需要去找一些好的示例，以便于我更好的学习。有时候不得不创造一些更好的场景，来实现这些功能。\n\n有一天，我发现当我需要我一次又一次地重复讲述某些内容，于是我就计划着把这些应该掌握的技能放到Github上，也就有了[Artisan Stack] 计划。\n\n每个程序员都不可避免地是一个Coder，一个没有掌握好技能的Coder，算不上是手工艺人，但是是手工人。\n\n艺，需要有创造性的方法。\n\n# [前端技能训练: 重构一]()\n\n## 为什么重构?\n\n> 为了更好的代码。\n\n在经历了一年多的工作之后，我平时的主要工作就是修Bug。刚开始的时候觉得无聊，后来才发现修Bug需要更好的技术。有时候你可能要面对着一坨一坨的代码，有时候你可能要花几天的时间去阅读代码。而，你重写那几十代码可能只会花上你不到一天的时间。但是如果你没办法理解当时为什么这么做，你的修改只会带来更多的bug。修Bug，更多的是维护代码。还是前人总结的那句话对:\n\n> 写代码容易，读代码难。\n\n假设我们写这些代码只要半天，而别人读起来要一天。为什么不试着用一天的时候去写这些代码，让别人花半天或者更少的时间来理解。\n\n如果你的代码已经上线，虽然是一坨坨的。但是不要轻易尝试，`没有测试的重构`。\n\n从前端开始的原因在于，写得一坨坨且最不容易测试的代码都在前端。\n\n让我们来看看我们的第一个训练，相当有挑战性。\n\n## 重构uMarkdown\n\n代码及setup请见github: [js-refactor]\n\n### 代码说明\n\n`uMarkdown`是一个用于将Markdown转化为HTML的库。代码看上去就像一个很典型的过程代码:\n\n    /* code */\n    while ((stra = micromarkdown.regexobject.code.exec(str)) !== null) {\n      str = str.replace(stra[0], '<code>\\n' + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, '<br/>').replace(/\\ /gm, '&nbsp;') + '</code>\\n');\n    }\n    \n    /* headlines */\n    while ((stra = micromarkdown.regexobject.headline.exec(str)) !== null) {\n      count = stra[1].length;\n      str = str.replace(stra[0], '<h' + count + '>' + stra[2] + '</h' + count + '>' + '\\n');\n    }\n    \n    /* mail */\n    while ((stra = micromarkdown.regexobject.mail.exec(str)) !== null) {\n      str = str.replace(stra[0], '<a href=\"mailto:' + stra[1] + '\">' + stra[1] + '</a>');\n    }\n\n选这个做重构的开始，不仅仅是因为之前在写[EchoesWorks]的时候进行了很多的重构。而且它更适合于，`重构到设计模式`的理论。让我们在重构完之后，给作者进行pull request吧。\n\nMarkdown的解析过程，有点类似于`Pipe and Filters`模式(架构模式)。\n\nFilter即我们在代码中看到的正规表达式集:\n\n    regexobject: {\n        headline: /^(\\#{1,6})([^\\#\\n]+)$/m,\n        code: /\\s\\`\\`\\`\\n?([^`]+)\\`\\`\\`/g\n\n他会匹配对应的Markdown类型，随后进行替换和处理。而``str```，就是管理口的输入和输出。\n\n接着，我们就可以对其进行简单的重构。\n\n### 重构\n\n(ps: 推荐用WebStrom来做重构，自带重构功能)\n\n作为一个示例，我们先提出codeHandler方法，即将上面的\n\n    /* code */\n    while ((stra = micromarkdown.regexobject.code.exec(str)) !== null) {\n      str = str.replace(stra[0], '<code>\\n' + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, '<br/>').replace(/\\ /gm, '&nbsp;') + '</code>\\n');\n    }\n\n提取方法成\n\n    codeFilter: function (str, stra) {\n        return str.replace(stra[0], '<code>\\n' + micromarkdown.htmlEncode(stra[1]).replace(/\\n/gm, '<br/>').replace(/\\ /gm, '&nbsp;') + '</code>\\n');\n      },\n\nwhile语句就成了\n\n      while ((stra = regexobject.code.exec(str)) !== null) {\n            str = this.codeFilter(str, stra);\n        }\n\n然后，运行所有的测试。\n\n    grunt test\n\n同理我们就可以`mail`、`headline`等方法进行重构。接着就会变成类似于下面的代码，\n\n      /* code */\n      while ((execStr = regExpObject.code.exec(str)) !== null) {\n        str = codeHandler(str, execStr);\n      }\n    \n      /* headlines */\n      while ((execStr = regExpObject.headline.exec(str)) !== null) {\n        str = headlineHandler(str, execStr);\n      }\n    \n      /* lists */\n      while ((execStr = regExpObject.lists.exec(str)) !== null) {\n        str = listHandler(str, execStr);\n      }\n    \n      /* tables */\n      while ((execStr = regExpObject.tables.exec(str)) !== null) {\n        str = tableHandler(str, execStr, strict);\n      }\n\n然后你也看到了，上面有一堆重复的代码，接着让我们用JavaScript的`奇技浮巧`，即apply方法，把上面的重复代码变成。\n\n        ['code', 'headline', 'lists', 'tables', 'links', 'mail', 'url', 'smlinks', 'hr'].forEach(function (type) {\n            while ((stra = regexobject[type].exec(str)) !== null) {\n                str = that[(type + 'Handler')].apply(that, [stra, str, strict]);\n            }\n        });\n\n进行测试，blabla，都是过的。\n\n     Markdown\n       ✓ should parse h1~h3\n       ✓ should parse link\n       ✓ should special link\n       ✓ should parse font style\n       ✓ should parse code\n       ✓ should parse ul list\n       ✓ should parse ul table\n       ✓ should return correctly class name\n\n这样，我们就完成第一个重构训练了~~。","tags":["css","javaScript","html","vue.js","elementui"],"categories":["前端优化"]},{"title":"谈谈敏捷开发","url":"/2020/12/03/谈谈敏捷开发/","content":"1. [谈谈敏捷开发](#谈谈敏捷开发)\n1. [小步快跑、敏捷开发](#小步快跑、敏捷开发)\n2. [真实的敏捷开发](#真实的敏捷开发)\n3. [后注](#后注)\n\n# [#谈谈敏捷开发](#谈谈敏捷开发)\n\n好久没有更新一下博客，最近有在尝试新的领域，可是一直没能积累下什么重要的知识、或者形成了什么重要的知识体系，就没能写下什么有意义的记录。可是很偶然的机会看到一个视频，里面讲述的，乔布斯谈论关于【流程与人才】的理解，基本可以总结为：苹果没有像 IBM 一样衰落，很大一部分原因是苹果没有执行像 IBM 一样严格的流程管理，使得有能力、有才华的人才能够不受大公司中条条框框的约束，充分发挥自己优势，最终促使苹果一次又一次的震惊世界。\n\n看到这个视频的时候，脑子中转过了好多好多的话语，没能按耐住自己的情绪，终究还是在 Twitter 中直接开喷。当然，喷的并不是乔布斯或者是他的言论，**乔帮主**在国内一波又一波媒体、开发者的吹捧下，早就已经走上了“冰封王座”。他的一生、创办苹果的风风雨雨，相信拜读过《乔布斯传》的人都能已经耳熟能详了，这里不再细说。总而言之，对于笔者自身，远远还达不到批判他的言辞的资格。\n\n> 废话说了那么多，结果原来只是像表达自己的弱小\n\n乔布斯确实过于优秀了，以至于越来越多的年轻人、创业者，都想要向他学习，见贤思齐焉。而学习最简单不过的方式，就是模仿。现在越来越容易听到那些晦涩难懂，可是由显得高端深奥的词汇。似乎在这种谈吐中更容易体现出自身对于产品思考的深入。\n\n“把握用户体验”，“重新定义 XX”，甚至 “打破流程”。“ IBM 之所以没落，就是因为他大公司中繁重的流程，约束的条条框框。” 所以我们要注重人才的才华展示，淡化流程。乔布斯所表达的观点，我们全盘接受。\n\n这样子的学习，简单至极。\n\n**流程不再重要了。**—— 这就是为什么现在产品经理跟开发工程师之间存在如此对立的原因。\n\n当然，其实乔布斯并非推动国内各大企业打破传统、废除流程的唯一功臣，另外一个更广为人知的，当然是数早已被广为人知的、被誉为中国第一产品经理的 —— 张小龙。如果你不知道这个人的话，你可以点击 (Ctrl+W) 组合键，快速查询这个人的相关信息。^_^ 得益于他的知名度以及微信的成功，“打破流程”、“简化流程”、“把握用户体验” 获得了一个更加接地气的名称 —— “**小步快跑，敏捷开发**”。\n\n对比于传统应用开发方式，敏捷开发在当前互联网形式上确为更加合适，毫不夸张的说，如果目前的产品开发还按照从前的开发形式，普通创业公司绝大部分会在产品推出之前，就将所有的开发经费耗光。这个时候没有任何知名度、也没有成型的产品，根本无从谈起融资以及上市。\n\n## [#小步快跑、敏捷开发](#小步快跑、敏捷开发)\n\n仔细考虑，其实这种开发方式在起步阶段是比较合理的。一周一个小版本，一个月一个大版本，对每次开发的新功能做好足够的调研以及打点统计，能够在不进行市场调查的前提上获取用户对于功能的喜好程度，从而在后续的开发中对特定的功能进行资源的倾斜，更大程度上去**取悦用户**。\n不得不说，微信在初期发展中，摸索到了**摇一摇**以及**朋友圈**这两大功能，然后持续在上面增加功能，优化体验，让用户真正的粘附在了微信生态上，也算是对小步快跑、敏捷开发的很好体现。微信的成功，也让更多的公司相信这种开发模式的正确性。\n\n我们来仔细捋一下这种开发模式的要点：\n\n1. 小版本周期短\n2. 小版本所携带新功能有针对性\n3. 开发过程中对新功能做好打点统计\n4. 产品上线后进行需求复盘，通过统计上报，得知用户对于新功能的喜好程度\n5. 对下一新版本的开发计划进行评估\n\n其中，复盘步骤对于敏捷开发的模式尤为重要。并且不仅是产品经理，包括开发人员都需要参与到复盘的步骤中。对于一个开发人员，得知自己所开发功能受到用户的喜爱，自身对于下个版本的开发积极性也会有相应的提高。\n\n## [#真实的敏捷开发](#真实的敏捷开发)\n\n可是，有多少公司又能很好地在版本迭代的过程中持续遵循上述的要点呢？不少的公司更多的只是喊着敏捷开发的口号，在更短的时间内，往产品中堆砌着更多的功能，从而导致开发人员在长时间内一直保持着难以接受的开发强度，最终导致人员的流失，项目的失败。\n\n笔者从自身的工作环境中，感受到两点：\n\n- 老板过多地参与进项目开发的细节中\n- 复盘步骤的缺失，或者复盘步骤对于产品经理们的负反馈缺失\n\n笔者对于第一点真是深有体会。其实老板们关注细节无可厚非，可是过多的参与到项目开发中，很容易导致到开发节奏混乱，无法保持小版本迭代的步骤中。因为版本开发迭代期间，并不会频繁地推送到老板处体验，只能在项目上线阶段提交给老板进行上线前的最后体验。正常情况下，老板应该对这个功能开发进行最后的确认，确认这个版本是否与开发初期所定下的发展方向一致，而不应该对细节进行过多的反馈，一来这个环节在开发过程中早就经过产品经理的把控；二来开发人员、乃至于产品经理，都很难对老板所提出的细节要求说不，容易导致项目进度一拖再拖。三来甚至会过度打击产品经理的积极性，最终导致产品经理不再创新，只会揣测老板的心思。\n\n即便是成功至此的微信，笔者感觉它都已经不再是认真遵循着敏捷开发的模式了，大家可以从微信的招聘口号中可以感受一下：\n\n> 做一个伟大的产品来取悦**自己**。\n\n## [#后注](#后注)\n\n毕竟这片文章只是有感而发，想到哪写到哪，尚未经过深入思考。请读者们轻喷。","categories":["开发技巧"]}]